# RiverWare_Ruleset 7.4.2 Patch
# Created 15:08 September 26, 2019
# 
RULESET
NAME "RBS Ruleset (from MRM run)";
AGENDA_ORDER ASCENDING;
DESCRIPTION "The way the spike and TBF overage rules are written, the EOWYST is reached at some point between Sept 1 and Sept 30. In low hydrologic years, the EOWYST will be reached slightly earlier in that month.     ";
PRECISION   2;
NOTES "";
BEGIN

  POLICY_GROUP   "4 Cycle- Navajo Shortage Sharing Rules";
  DESCRIPTION    "Cycle 4 can remain on no matter what, but if a shortage occurs in Cycle 3, you must run the Cycle 4 shortage sharing to compensate.<br><br>Shortage sharing rules are in here fairly simplistically.  It just divides the shortage between NIIP, SJC, and Navajo Release. <br><br>Shortage occuring in any calendar year is spread equally by percentage over all demands for that year.<br><br>IF THERE IS NO SHORTAGE, BE SURE THAT <br>1) SHORTAGEDATA.SHORTAGEADJUSTMENT INPUTS ARE ALL EQUAL TO ZERO  <br>2) or CYCLE 4 IS NOT ON<br><br>Shortage: If Shortage.LocalInflow>0, use Cycle 4 to adjust for shortages. <br>Because of various limitations, this is an iterative process.  <br>After model run, Increment ShortageData.ShortageAdjustment by a small amount (0.01-0.1) in years<br> ShortageData.AnnualShortageRemaining>0 year. <br><br>If the shortage won't go away, it's likely occuring at the beginning of the year- <br>(look at Navajo Shortage plot) try increasing the previous year shortage by a small amount.<br><br><br>";
  ACTIVE         FALSE;
  NAMES_COLOR  "#ff00ff";
  NOTES          "";
  BEGIN

    RULE                 "Set Shorted Inflows and Releases";
    DESCRIPTION          "This rule can be turned off if you want shortages to be calculated but NOT set.<br>";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 4.00000000;
  NAMES_COLOR  "#aa0000";
    NOTES                "";
    BEGIN

      $ "San Juan Chama Project.Diversion" [] := "Max"( $ "ShortageData.ShortedSJC" [], 0.00000000 "cfs" );

      $ "NIIP.Diversion" [] := "Max"( $ "ShortageData.ShortedNIIP" [], 0.00000000 "cfs" );

      $ "Navajo Reservoir.Release" [] := "Max"( $ "ShortageData.ShortedRelease" [], 250.00000000 "cfs" );

      $ "Navajo Reservoir.Inflow" [] := $ "ShortageData.ShortedInflow" [];

    END;

    RULE                 "Calculate Shorted Observed Inflow";
    DESCRIPTION          "Navajo MUI doesn't change. That's an official CBRFC forecast product. The observed inflow to Navajo changes because since SJC takes a &quot;shorted&quot; amount, we see it show up in the reservoir as an addition to the observed inflow. Therefore it is added back in.<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 4.00000000;
  NAMES_COLOR  "#ff00ff";
    NOTES                "";
    BEGIN

      $ "ShortageData.ShortedInflow" [] := $ "Navajo Reservoir.Inflow" [] + $ "ShortageData.ShortagePercentage" [] * $ "San Juan Chama Project.Diversion Requested" [];

    END;

    RULE                 "CalcShortageToRelease";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 4.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "ShortageData.ShortedRelease" [] := $ "Navajo Reservoir.Release" [] - $ "Navajo Reservoir.Release" [] * $ "ShortageData.ShortagePercentage" [];

    END;

    RULE                 "CalcShortageToNIIP";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 4.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "ShortageData.ShortedNIIP" [] := $ "NIIP.Diversion Requested" [] - $ "NIIP.Diversion Requested" [] * $ "ShortageData.ShortagePercentage" [];

    END;

    RULE                 "CalcShortageToSJC";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 4.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "ShortageData.ShortedSJC" [] := $ "San Juan Chama Project.Diversion Requested" [] - $ "San Juan Chama Project.Diversion Requested" [] * $ "ShortageData.ShortagePercentage" [];

    END;

    RULE                 "CalculatePercentage";
    DESCRIPTION          "The shortage percentage can be incremented by percent (it will max at 100% shortage) in the ShortageData.ShortageAjustment slot.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 4.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "ShortageData.ShortagePercentage" [] := "Min"( $ "ShortageData.AnnualShortageVolume" [] / $ "ShortageData.AnnualNavajoDemand" [] + $ "ShortageData.ShortageAdjustment" ["CompletePartialDate"( @"December 31", @"t" )], 1.00000000 );

    END;

    RULE                 "SumCycle3Demands";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 4.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "ShortageData.AnnualNavajoDemand" [] := "SumSlotSkipNaN"( $ "ShortageData.WholeDemandsFromCycle3", "DateMax"( @"Start Timestep", @"24:00:00 January 1, Current Year" ), "DateMin"( @"24:00:00 December 31, Current Year", @"Finish Timestep" ) );

    END;

    RULE                 "SumAnnualShortageVolumes";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 4.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "ShortageData.AnnualShortageVolume" [] := "SumSlotSkipNaN"( $ "ShortageData.ShortageVolumeToRecover", "DateMax"( @"Start Timestep", @"24:00:00 January 1, Current Year" ), "DateMin"( @"24:00:00 December 31, Current Year", @"Finish Timestep" ) );

    END;

  END;

  POLICY_GROUP   "3 Cycle- Limits and Checks";
  DESCRIPTION    "Cycle limits for safe channel capacity, USACE storage limits, etc.  If the reservoir goes into a shortage, it is recorded here by way of the Shortage object. If that comes into play you must run Cycle 4.";
  ACTIVE         TRUE;
  NAMES_COLOR  "#00aa00";
  NOTES          "";
  BEGIN

    RULE                 "RecordShortageAndDemands";
    DESCRIPTION          "Whole demands from Cycle 3 is the volumetric addition of Navajo Release, NIIP, and San Juan-Chama, MINUS the 250cfs minimum daily release from Navajo in acre-feet.  This ensures we are adding together only volumes that are available to short.<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 3.00000000;
    NOTES                "";
    BEGIN

      $ "ShortageData.ShortageVolumeToRecover" [] := "FlowToVolume"( $ "Shortage.Local Inflow" [], @"t" );

      $ "ShortageData.WholeDemandsFromCycle3" [] := "FlowToVolume"( $ "Navajo Reservoir.Release" [], @"t" ) + "FlowToVolume"( $ "NIIP.Diversion" [], @"t" ) + "FlowToVolume"( $ "San Juan Chama Project.Diversion" [], @"t" ) - 495.86776800 "acre-feet";

      $ "ShortageData.NavajoReleasesCycle3" [] := $ "Navajo Reservoir.Release" [];

    END;

    RULE                 "Shortage-KeepsNavajoWhole";
    DESCRIPTION          "This is the volume Navajo is shorted by. It's automatically added to Navajo as a &quot;ghost&quot; inflow.   This is saved when we get to the end of Cycle 3 (by the next rule).<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) < 4.00000000;
  NAMES_COLOR  "#00aa00";
    NOTES                "";
    BEGIN

      $ "Shortage.Local Inflow" [] := IF ( $ "Navajo Reservoir.Storage" [@"t - 1"] < $ "Navajo Reservoir.MinNIIPStorage" [] )
 THEN
  "VolumeToFlow"( $ "Navajo Reservoir.MinNIIPStorage" [] - $ "Navajo Reservoir.Storage" [@"t - 1"], @"t" )
 ELSE
  0.00000000 "cfs"
 ENDIF;

    END;

    RULE                 "MaxStorage";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "Navajo Reservoir.Release" [] := IF ( $ "Navajo Reservoir.Storage" [] > $ "NavajoData.MaxStorageWithoutFloodPool" [] )
 THEN
  "VolumeToFlow"( $ "Navajo Reservoir.Storage" [] - $ "NavajoData.MaxStorageWithoutFloodPool" [], @"t" ) + $ "Navajo Reservoir.Release" []
 ENDIF;

    END;

    RULE                 "KnownReleaseOverwrite";
    DESCRIPTION          "Adds in recent releases that are known. Also can add in actual SPR when in the middle of the release, or some other SJRIP Adaptive Management Use.  Leave NaN's when not changing anything and this will just overwrite.<br><br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 3.00000000;
    NOTES                "";
    BEGIN

      $ "Navajo Reservoir.Release" [] := IF ( NOT IsNaN $ "NavajoData.KnownReleasePattern" [] )
 THEN
  $ "NavajoData.KnownReleasePattern" []
 ENDIF;

    END;

    RULE                 "ReleaseForUSACEStorageLimit";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 3.00000000 AND "USACEWinterLimitSeason"(  );
    NOTES                "";
    BEGIN

      $ "Navajo Reservoir.Release" [] := IF ( $ "Navajo Reservoir.Storage" [@"t - 1"] > $ "NavajoData.NavFloodControlStorageLimit" [] )
 THEN
  "Min"( "VolumeToFlow"( $ "Navajo Reservoir.Storage" [@"t - 1"] - $ "NavajoData.NavFloodControlStorageLimit" [], @"t" ) + $ "Navajo Reservoir.Release" [], "MaxReleaseFunction_SafetyFactor"(  ) )
 ENDIF;

    END;

    RULE                 "USACEStorageLimit";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 3.00000000 AND "USACEWinterLimitSeason"(  );
    NOTES                "";
    BEGIN

      $ "NavajoData.NavFloodControlStorageLimit" [] := IF ( $ "NavajoData.USACEStorageLimitPercentage" [@"t - 1"] < 0.95000000 AND ( "NavajoFloodControlLowerColumnValue"(  ) == $ "NavajoData.MaxStorage" [] AND "NavajoFloodControlUpperColumnValue"(  ) < "NavajoFloodControlLowerColumnValue"(  ) ) )
 THEN
  $ "NavajoData.MaxStorage" []
 ELSE
  $ "NavajoData.FloodControlTables" [@"t", "SumFlowsToVolume"( $ "Navajo Reservoir.Inflow", @"t", @"24:00:00 July 15, Current Year" )]
 ENDIF;

    END;

    RULE                 "USACEStorageLimit_OLD";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 3.00000000 AND "USACEWinterLimitSeason"(  );
    NOTES                "";
    BEGIN

      $ "NavajoData.NavFloodControlStorageLimit" [] := $ "NavajoData.FloodControlTables" [@"t", "SumFlowsToVolume"( $ "Navajo Reservoir.Inflow", @"t", @"24:00:00 July 15, Current Year" )];

    END;

    RULE                 "SafeChannelCapacity";
    DESCRIPTION          "If any of the flows below Farmington are >12,000, then reduce the release by (Flow - 12,000).  Gets us pretty close.<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 3.00000000;
    NOTES                "";
    BEGIN

      IF_STATEMENT ("Max"( "Max"( $ "SJFS.Inflow" [@"t - 1"], $ "SJFS.Outflow" [@"t - 1"] ), "Max"( $ "SJ4B.Outflow" [@"t - 1"], $ "SJS4.Outflow" [@"t - 1"] ) ) > 12000.00000000 "cfs") THEN
            $ "Navajo Reservoir.Release" [] := $ "Navajo Reservoir.Release" [] - "Max"( "Max"( "Max"( $ "SJFS.Inflow" [@"t - 1"], $ "SJFS.Outflow" [@"t - 1"] ), "Max"( $ "SJ4B.Outflow" [@"t - 1"], $ "SJS4.Outflow" [@"t - 1"] ) ) - 12000.00000000 "cfs", 0.00000000 "cfs" );

      END_IF_STATEMENT;

    END;

  END;

  POLICY_GROUP   "3 Cycle- Navajo 2016 Interim Operations";
  DESCRIPTION    "The new Navajo rules are based on the new SJRIP plan of using all the AW down to 6050 to maximize the spring peak release days at 5,000 cfs. The release must be at least 21 days long and no longer than 60 days.  There is no nose anymore- I take care of that using USACE flood control storage rules.  This may or may not be changed in the future back to using a nose.  The overage over 6063 is spread over summer TBF and finally a spike in the fall.<br>";
  ACTIVE         TRUE;
  NAMES_COLOR  "#00aa00";
  NOTES          "";
  BEGIN

    RULE                 "AddSpike";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "SpikeSeason"(  );
  NAMES_COLOR  "#00aa00";
    NOTES                "";
    BEGIN

      $ "Navajo Reservoir.Release" [] := "Min"( "Max"( $ "Navajo Reservoir.Release" [], $ "NavajoData.SpikeRelease" [] ), "MaxReleaseFunction_SafetyFactor"(  ) );

    END;

    RULE                 "CalculateSpike";
    DESCRIPTION          "Calculate spike volume for Sept 1- Sept 30 based on leftovers from nose and spike. This is a quick rule right now, should update to be more realistic (include correct ramping, etc.)  <br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "SpikeSeason"(  );
  NAMES_COLOR  "#00aa00";
    NOTES                "";
    BEGIN

      $ "NavajoData.SpikeRelease" [] := IF ( $ "Navajo Reservoir.Storage" [] > "ElevationToStorage"( % "Navajo Reservoir", 6063.00000000 "feet" ) + 0.00000000 "acre-ft" )
 THEN
  "Min"( "VolumeToFlow"( $ "Navajo Reservoir.Storage" [] - ( "ElevationToStorage"( % "Navajo Reservoir", 6063.00000000 "feet" ) + 0.00000000 "acre-ft" ), @"t" ), "MaxReleaseFunction_SafetyFactor"(  ) )
 ELSE
  0.00000000 "cfs"
 ENDIF;

    END;

    RULE                 "IncrementRelease";
    DESCRIPTION          "This rule increments the release into blocks (accounts for gate curve, min resolution of changes)<br>8/2/2018- updated to use &quot;249cfs&quot; instead of min release function<br>";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
  NAMES_COLOR  "#ff0000";
    NOTES                "";
    BEGIN

      $ "Navajo Reservoir.Release" [] := "Min"( "Ceiling"( "Max"( "Max"( $ "NavajoData.ReleaseToMeetTBF" [], $ "Navajo Reservoir.Release" [] ), 249.00000000 "cfs" ), $ "NavajoData.Release Increments" [] ), "MaxReleaseFunction_SafetyFactor"(  ) );

    END;

    RULE                 "ReForecast Releases";
    DESCRIPTION          "Forecasts the release required to meet the TBF minimum downstream plus the overage.  If the function cannot find a release to use, hypsim will return a message in diagnostics and will be ineffective.<br><br>This rule fires in Cycle 3, as well as Cycle 2. The reason is just in case the SPR goes down since Cycle 2, we need to know what the release should be to meet the TBF in those few days.<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "GetRunCycleIndex"(  ) == 3.00000000;
  NAMES_COLOR  "#00aa00";
    NOTES                "";
    BEGIN

      WITH_STATEMENT (LIST forecastrelease = "HypTargetSimWithStatus"( "BelowReservoirs", $ "SJAF.Inflow", $ "NavajoData.SeriesMinRelease" [], $ "NavajoData.MaxRelease" [], { { $ "Florida River.Inflow" , $ "Florida River.Inflow" [@"t"] , @"t" } , { $ "Florida River.Inflow" , $ "Florida River.Inflow" [@"t"] , @"t + 1" } , { $ "Florida River.Inflow" , $ "Florida River.Inflow" [@"t"] , @"t + 2" } , { $ "Florida River.Inflow" , $ "Florida River.Inflow" [@"t"] , @"t + 3" } , { $ "Pine River.Inflow" , $ "Pine River.Inflow" [@"t"] , @"t" } , { $ "Pine River.Inflow" , $ "Pine River.Inflow" [@"t"] , @"t + 1" } , { $ "Pine River.Inflow" , $ "Pine River.Inflow" [@"t"] , @"t + 2" } , { $ "Pine River.Inflow" , $ "Pine River.Inflow" [@"t"] , @"t + 3" } , { $ "Basin Creek Y Animas.Inflow2" , $ "Basin Creek Y Animas.Inflow2" [@"t"] , @"t" } , { $ "Basin Creek Y Animas.Inflow2" , $ "Basin Creek Y Animas.Inflow2" [@"t"] , @"t + 1" } , { $ "Basin Creek Y Animas.Inflow2" , $ "Basin Creek Y Animas.Inflow2" [@"t"] , @"t + 2" } , { $ "Basin Creek Y Animas.Inflow2" , $ "Basin Creek Y Animas.Inflow2" [@"t"] , @"t + 3" } , { $ "SJAF.Local Inflow" , $ "SJAF.Local Inflow" [@"t - 1"] , @"t" } , { $ "SJAF.Local Inflow" , $ "SJAF.Local Inflow" [@"t - 1"] , @"t + 1" } , { $ "SJAF.Local Inflow" , $ "SJAF.Local Inflow" [@"t - 1"] , @"t + 2" } , { $ "SJAF.Local Inflow" , $ "SJAF.Local Inflow" [@"t - 1"] , @"t + 3" } , { $ "SJFS.Local Inflow" , $ "SJFS.Local Inflow" [@"t - 1"] , @"t" } , { $ "SJFS.Local Inflow" , $ "SJFS.Local Inflow" [@"t - 1"] , @"t + 1" } , { $ "SJFS.Local Inflow" , $ "SJFS.Local Inflow" [@"t - 1"] , @"t + 2" } , { $ "SJFS.Local Inflow" , $ "SJFS.Local Inflow" [@"t - 1"] , @"t + 3" } , { $ "SJS4.Local Inflow" , $ "SJS4.Local Inflow" [@"t - 1"] , @"t" } , { $ "SJS4.Local Inflow" , $ "SJS4.Local Inflow" [@"t - 1"] , @"t + 1" } , { $ "SJS4.Local Inflow" , $ "SJS4.Local Inflow" [@"t - 1"] , @"t + 2" } , { $ "SJS4.Local Inflow" , $ "SJS4.Local Inflow" [@"t - 1"] , @"t + 3" } }, $ "SJS4.Outflow", @"t + 3", "Min"( $ "NavajoData.MinTBF" [] + $ "NavajoData.SummerTBFOverage" [], $ "NavajoData.MAX TBF" [] ), 10.00000000 "cfs", 40.00000000, 0.00000000 )) DO
            $ "NavajoData.ReleaseToMeetTBF" [] := GET @INDEX 1.00000000 FROM forecastrelease;

      END_WITH_STATEMENT;

    END;

    RULE                 "Set Recalculated Local Inflows ";
    DESCRIPTION          "Sets the gainloss based on the inflows on a daily basis to a slot in the gainloss data object.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "GetRunCycleIndex"(  ) == 3.00000000;
    NOTES                "";
    BEGIN

      $ "SJ4B.Local Inflow" [] := $ "SJ4B.DailyGainLoss" [@"t", $ "GainLossCalculations.SJ4BGL" []];

      $ "SJAF.Local Inflow" [] := $ "SJAF.DailyGainLoss" [@"t", $ "GainLossCalculations.SJAFGL" []];

      $ "SJFS.Local Inflow" [] := $ "SJFS.DailyGainLoss" [@"t", $ "GainLossCalculations.SJFSGL" []];

      $ "SJS4.Local Inflow" [] := $ "SJS4.DailyGainLoss" [@"t", $ "GainLossCalculations.SJS4GL" []];

      $ "Animas River.Local Inflow" [] := $ "Animas River.DailyGainLoss" [@"t", $ "GainLossCalculations.AnimasGL" []];

    END;

    RULE                 "Set Recalculated GainLoss Percentile";
    DESCRIPTION          "Sets the gainloss percentile based on the inflows on a daily basis to a slot in the gainloss percentil data object for each Reach.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "GetRunCycleIndex"(  ) == 3.00000000;
    NOTES                "";
    BEGIN

      $ "GainLossCalculations.SJ4BGL" [] := "Adjust GainLoss"( % "SJ4B" );

      $ "GainLossCalculations.SJAFGL" [] := "Adjust GainLoss"( % "SJAF" );

      $ "GainLossCalculations.SJFSGL" [] := "Adjust GainLoss"( % "SJFS" );

      $ "GainLossCalculations.SJS4GL" [] := "Adjust GainLoss"( % "SJS4" );

      $ "GainLossCalculations.AnimasGL" [] := "Adjust GainLoss"( % "Animas River" );

    END;

    RULE                 "CalculateOverageInCFS";
    DESCRIPTION          "This rule says what would I need to release today in order to have 0 AW left on Sept 30th? It's total outflow so I subtract NIIP. Not exact but gets closer and closer by Sept 30th.<br><br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND "SummerBaseflowSeason"(  );
  NAMES_COLOR  "#00aa00";
    NOTES                "";
    BEGIN

      $ "NavajoData.SummerTBFOverage" [] := "Max"( "OutflowRequredToMeetTPE1"( % "Navajo Reservoir", $ "Navajo Reservoir.Inflow", $ "Navajo Reservoir.Storage", $ "NavajoData.OpSpillEWYST" ) - $ "NIIP.Diversion" [], 0.00000000 "cfs" );

    END;

    RULE                 "Manual Maintenance Release";
    DESCRIPTION          "When SPR has begun (when very close to SPR time) , the SPR must be manually input here-- this rule should be turned off and the SPR being used should be input into the &quot;NavajoData.KnownReleasePattern&quot; slot.";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
  NAMES_COLOR  "#ff0000";
    NOTES                "";
    BEGIN

      $ "Navajo Reservoir.Release" [] := IF ( NOT IsNaN $ "NavajoData.ManualMaintenanceRelease" [] )
 THEN
  $ "NavajoData.ManualMaintenanceRelease" []
 ENDIF;

    END;

    RULE                 "InsertNewSPR";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "SpringPeakReleaseSeason"(  );
  NAMES_COLOR  "#00aa00";
    NOTES                "";
    BEGIN

      $ "Navajo Reservoir.Release" [] := IF ( $ "NavajoData.Cycle3SpringPeakRelease" [] > $ "Navajo Reservoir.Release" [] )
 THEN
  "Min"( $ "NavajoData.Cycle3SpringPeakRelease" [], "MaxReleaseFunction_SafetyFactor"(  ) )
 ENDIF;

    END;

    RULE                 "SetCycle2OperationalRelease";
    DESCRIPTION          "Sets release as whatever the operational release from Cycle 2 was (to start)<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "GetRunCycleIndex"(  ) == 3.00000000;
  NAMES_COLOR  "#00aa00";
    NOTES                "";
    BEGIN

      $ "Navajo Reservoir.Release" [] := $ "NavajoData.Cycle2OperationalReleases" [];

    END;

    RULE                 "Count SPR Days";
    DESCRIPTION          "Count the days so we can subtract 350 cfs baseflow";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "SpringPeakReleaseSeason"(  );
  NAMES_COLOR  "#00aa00";
    NOTES                "";
    BEGIN

      $ "NavajoData.Cycle3NumSPRDays" [] := IF ( $ "NavajoData.Cycle3SpringPeakRelease" [] > 0.00000000 "cfs" )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

    END;

    RULE                 "SetSPR";
    DESCRIPTION          "When SPR has begun (when very close to SPR time) , the SPR must be manually input here-- this rule should be turned off and the SPR being used should be input into the &quot;NavajoData.KnownReleasePattern&quot; slot.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
  NAMES_COLOR  "#00aa00";
    NOTES                "";
    BEGIN

      $ "NavajoData.Cycle3SpringPeakRelease" [] := IF ( "SpringPeakReleaseSeason"(  ) )
 THEN
  $ "NavajoData.SPRTables_7dayramp" [@"t", $ "NavajoData.Cycle3MaxDaysAtPeak" [@"t"]]
 ENDIF;

    END;

    RULE                 "CalcMaxDaysAtPeak";
    DESCRIPTION          "This rule takes the AW and subtracts an appx 10-day ramp-up volume over base, and a 12-day ramp-down volume over base. Then it divdes the remainder by the volume of a single peak day over base. This returns the total number of days we will run at 5,000 cfs.  In the end, it may be +/- a day or two.<br><br>Doesn't need to be a round number since we're using tables.<br><br>Change the 50,000 number if changing the # of ramping days, and point to the correct SPR ramp table.<br>3-day:18,000<br>7-day: 42,000<br>10-day: 61,000<br><br>Ramp-down (12-days): 65,000";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "SpringPeakReleaseSeason"(  );
    NOTES                "";
    BEGIN

      $ "NavajoData.Cycle3MaxDaysAtPeak" [] := "Max"( "Floor"( ( $ "NavajoData.Cycle3AvailableWater" [] - 42000.00000000 "acre-feet" - 65000.00000000 "acre-ft" ) / 9223.00000000 "acre-ft" - 1.00000000, 1.00000000 ), 0.00000000 );

    END;

    RULE                 "Recalculated Available Water";
    DESCRIPTION          "AW calculation based on new calculation using EOWYST of 6050 ft. The AW calculated is the volume OVER base (350 cfs) that would be available.  ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "SpringPeakReleaseSeason"(  );
  NAMES_COLOR  "#00aa00";
    NOTES                "";
    BEGIN

      $ "NavajoData.Cycle3AvailableWater" [] := IF ( @"t" == "FirstAWCalcDate"(  ) )
 THEN
  $ "Navajo Reservoir.Storage" [@"t - 1"] + "SumFlowsToVolume"( $ "Navajo Reservoir.Inflow", @"t", @"24:00:00 September 30, Current Year" ) - "SumFlowsToVolume"( $ "Navajo Reservoir.Diversion", @"t", @"24:00:00 September 30, Current Year" ) - "SumSlot"( $ "Navajo Reservoir.Evaporation", @"t", @"24:00:00 September 30, Current Year" ) - "SumFlowsToVolume"( $ "NavajoData.Cycle2OperationalReleases", @"t", @"24:00:00 September 30, Current Year" ) - "ElevationToStorage"( % "Navajo Reservoir", 6050.00000000 "feet" )
 ELSE
  $ "NavajoData.Cycle3AvailableWater" ["FirstAWCalcDate"(  )]
 ENDIF;

    END;

  END;

  POLICY_GROUP   "2 Cycle- Navajo Rules";
  DESCRIPTION    "This is a &quot;first pass &quot; at operating Navajo. The purpose of this cycle is to first calculate what &quot;Operational releases&quot; are needed to satisfy the minimum TBF downstream.  This must be calculated before the third cycle so that the Available Water for the year can be calculated.  A set of &quot;seed&quot; spring peak releases are used (Manual Spring Peak Release) just to keep the pool elevation and storage at Navajo to something realistic, rather than allowing it to build up.  For operational forecasts, it just uses last month's releases.    At the end of this, the operational releases are stored for Cycle 3.";
  ACTIVE         TRUE;
  NAMES_COLOR  "#aa00ff";
  NOTES          "";
  BEGIN

    RULE                 "SaveCycle2OperationalReleases";
    DESCRIPTION          "Operational releases are just saved for Cycle 2 calculations.<br><br>NaN function in there because there are a few NaN's at the very end of the run in ReleasetomeetTBF (3-day lag)<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 2.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "NavajoData.Cycle2OperationalReleases" [] := IF ( IsNaN $ "NavajoData.ReleaseToMeetTBF" [] )
 THEN
  $ "NavajoData.SeriesMinRelease" []
 ELSE
  $ "NavajoData.ReleaseToMeetTBF" []
 ENDIF;

    END;

    RULE                 "StoreCycle2Elevation";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 2.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "NavajoData.Cycle2NavajoElev" [] := $ "Navajo Reservoir.Pool Elevation" [];

    END;

    RULE                 "PickRelease";
    DESCRIPTION          "Sets release to the forecast releases.  No rounding yet for this iteration.<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "GetRunCycleIndex"(  ) == 2.00000000;
    NOTES                "";
    BEGIN

      $ "Navajo Reservoir.Release" [] := "Max"( $ "NavajoData.ReleaseToMeetTBF" [], $ "NavajoData.SeriesMinRelease" [] );

    END;

    RULE                 "Forecast Releases";
    DESCRIPTION          "Forecasts the release required to meet the TBF minimum downstream.  If the function cannot find a release to use, hypsim will return a message in diagnostics and will be ineffective.<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "GetRunCycleIndex"(  ) == 2.00000000;
    NOTES                "";
    BEGIN

      WITH_STATEMENT (LIST forecastrelease = "HypTargetSimWithStatus"( "BelowReservoirs", $ "SJAF.Inflow", $ "NavajoData.SeriesMinRelease" [], $ "NavajoData.MaxRelease" [], { { $ "Florida River.Inflow" , $ "Florida River.Inflow" [@"t"] , @"t" } , { $ "Florida River.Inflow" , $ "Florida River.Inflow" [@"t"] , @"t + 1" } , { $ "Florida River.Inflow" , $ "Florida River.Inflow" [@"t"] , @"t + 2" } , { $ "Florida River.Inflow" , $ "Florida River.Inflow" [@"t"] , @"t + 3" } , { $ "Pine River.Inflow" , $ "Pine River.Inflow" [@"t"] , @"t" } , { $ "Pine River.Inflow" , $ "Pine River.Inflow" [@"t"] , @"t + 1" } , { $ "Pine River.Inflow" , $ "Pine River.Inflow" [@"t"] , @"t + 2" } , { $ "Pine River.Inflow" , $ "Pine River.Inflow" [@"t"] , @"t + 3" } , { $ "Basin Creek Y Animas.Inflow2" , $ "Basin Creek Y Animas.Inflow2" [@"t"] , @"t" } , { $ "Basin Creek Y Animas.Inflow2" , $ "Basin Creek Y Animas.Inflow2" [@"t"] , @"t + 1" } , { $ "Basin Creek Y Animas.Inflow2" , $ "Basin Creek Y Animas.Inflow2" [@"t"] , @"t + 2" } , { $ "Basin Creek Y Animas.Inflow2" , $ "Basin Creek Y Animas.Inflow2" [@"t"] , @"t + 3" } , { $ "SJAF.Local Inflow" , $ "SJAF.Local Inflow" [@"t - 1"] , @"t" } , { $ "SJAF.Local Inflow" , $ "SJAF.Local Inflow" [@"t - 1"] , @"t + 1" } , { $ "SJAF.Local Inflow" , $ "SJAF.Local Inflow" [@"t - 1"] , @"t + 2" } , { $ "SJAF.Local Inflow" , $ "SJAF.Local Inflow" [@"t - 1"] , @"t + 3" } , { $ "SJFS.Local Inflow" , $ "SJFS.Local Inflow" [@"t - 1"] , @"t" } , { $ "SJFS.Local Inflow" , $ "SJFS.Local Inflow" [@"t - 1"] , @"t + 1" } , { $ "SJFS.Local Inflow" , $ "SJFS.Local Inflow" [@"t - 1"] , @"t + 2" } , { $ "SJFS.Local Inflow" , $ "SJFS.Local Inflow" [@"t - 1"] , @"t + 3" } , { $ "SJS4.Local Inflow" , $ "SJS4.Local Inflow" [@"t - 1"] , @"t" } , { $ "SJS4.Local Inflow" , $ "SJS4.Local Inflow" [@"t - 1"] , @"t + 1" } , { $ "SJS4.Local Inflow" , $ "SJS4.Local Inflow" [@"t - 1"] , @"t + 2" } , { $ "SJS4.Local Inflow" , $ "SJS4.Local Inflow" [@"t - 1"] , @"t + 3" } }, $ "SJS4.Outflow", @"t + 3", $ "NavajoData.MinTBF" [], 10.00000000 "cfs", 40.00000000, 0.00000000 )) DO
            $ "NavajoData.ReleaseToMeetTBF" [] := GET @INDEX 1.00000000 FROM forecastrelease;

      END_WITH_STATEMENT;

    END;

    RULE                 "Set MinRel to 250 Forever";
    DESCRIPTION          "This uses a formula to set minimum release out of Navajo based on current pool elevation. It leaves it at 350 cfs during Spring Peak Release season.";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "GetRunCycleIndex"(  ) == 2.00000000;
    NOTES                "";
    BEGIN

      $ "NavajoData.SeriesMinRelease" [] := 249.00000000 "cfs";

    END;

    RULE                 "Set MinRel to 250 till spring 2019";
    DESCRIPTION          "This uses a formula to set minimum release out of Navajo based on current pool elevation. It leaves it at 350 cfs during Spring Peak Release season.";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "GetRunCycleIndex"(  ) == 2.00000000 AND @"t" < @"24:00:00 May 1, 2019";
    NOTES                "";
    BEGIN

      $ "NavajoData.SeriesMinRelease" [] := 249.00000000 "cfs";

    END;

    RULE                 "SetMinReleaseByElevation";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "GetRunCycleIndex"(  ) == 2.00000000;
    NOTES                "";
    BEGIN

      $ "Navajo Reservoir.Release" [] := $ "NavajoData.SeriesMinRelease" [];

    END;

    RULE                 "CalculateMinReleaseByElevation";
    DESCRIPTION          "This uses a formula to set minimum release out of Navajo based on current pool elevation. It leaves it at 350 cfs during Spring Peak Release season.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "GetRunCycleIndex"(  ) == 2.00000000;
    NOTES                "";
    BEGIN

      $ "NavajoData.SeriesMinRelease" [] := IF ( @"t" == @"Start Timestep" )
 THEN
  349.00000000 "cfs"
 ELSE
  "MinReleaseFunction"(  )
 ENDIF;

    END;

    RULE                 "Set NVRN5 Inflow";
    DESCRIPTION          "According to UC and HDB calculation. Evap is included because it's int he change in storage calculation- and it needs to cancel out (mod unreg assumes the project isn't there, so evap wouldn't occur)";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 2.00000000;
  NAMES_COLOR  "#aa00ff";
    NOTES                "";
    BEGIN

      $ "Navajo Reservoir.Inflow" [] := $ "NavajoData.CBRFC Inflow" [] - $ "San Juan Chama Project.Diversion" [] - "VolumeToFlow"( $ "Vallecito Reservoir.Storage" [] - $ "Vallecito Reservoir.Storage" [@"t - 1"], @"t" ) - "VolumeToFlow"( $ "Vallecito Reservoir.Evaporation" [], @"t" );

    END;

  END;

  POLICY_GROUP   "1 Cycle- Nighthorse Rules";
  DESCRIPTION    "Rules governing the operation of Ridges Basin and ALP";
  ACTIVE         TRUE;
  NAMES_COLOR  "#0055ff";
  NOTES          "";
  BEGIN

    RULE                 "MaxStorageSpill";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Nighthorse Reservoir.Outflow" [] := IF ( $ "Nighthorse Reservoir.Storage" [] > $ "NighthorseData.MaxStorage" [] + $ "NighthorseData.StorageBuffer" [] )
 THEN
  "VolumeToFlow"( $ "Nighthorse Reservoir.Storage" [] - ( $ "NighthorseData.MaxStorage" [] + $ "NighthorseData.StorageBuffer" [] ), @"t" ) + $ "Nighthorse Reservoir.Outflow" []
 ENDIF;

    END;

    RULE                 "MaxStorageStopPumping";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Nighthorse Reservoir.Storage" [] > $ "NighthorseData.MaxStorage" []) THEN
            $ "Nighthorse Reservoir.Flow FROM Pumped Storage" [] := 0.00000000 "cfs";

      END_IF_STATEMENT;

    END;

    RULE                 "DownstreamDemands";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Nighthorse Reservoir.Release" [] := $ "NighthorseData.DownstreamDemand" [];

    END;

    RULE                 "PumpingLossToAnimas";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Animas abv Nighthorse.Variable GainLoss" [] := - 1.00000000 * $ "Nighthorse Reservoir.Flow FROM Pumped Storage" [];

    END;

    RULE                 "PumpingOverride";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Nighthorse Reservoir.Flow FROM Pumped Storage" [] := IF ( NOT IsNaN $ "NighthorseData.PumpOverride" [] )
 THEN
  $ "NighthorseData.PumpOverride" []
 ENDIF;

    END;

    RULE                 "PumpingLimitations";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Nighthorse Reservoir.Flow FROM Pumped Storage" [] := "Min"( $ "Nighthorse Reservoir.Flow FROM Pumped Storage" [], "Min"( $ "NighthorseData.MaxDPPPump" [], $ "NighthorseData.Available To Pump" [] ) );

    END;

    RULE                 "PumpingOperation-withrefill";
    DESCRIPTION          "If it's the first day of pumping, then we pick the appropriate step pump. Then anytime over the next two months that the reservoir is < 6882, the pumps kick back on and choose the May 1 pump rate.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000 AND "ALP Pumping Season"(  ) AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "Nighthorse Reservoir.Flow FROM Pumped Storage" [] := IF ( "IsFirstDayOfPumping"(  ) )
 THEN
  "PickStepPump"(  )
 ELSE
  IF ( $ "Nighthorse Reservoir.Pool Elevation" [@"t - 1"] < $ "NighthorseData.MaxElev" [] )
  THEN
   $ "Nighthorse Reservoir.Flow FROM Pumped Storage" [@"24:00:00 June 6, Current Year"]
  ELSE
   0.00000000 "cfs"
  ENDIF
 ENDIF;

    END;

    RULE                 "SetPumpsToZero";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Nighthorse Reservoir.Flow FROM Pumped Storage" [] := 0.00000000 "cfs";

    END;

  END;

  POLICY_GROUP   "1 Cycle- Lemon Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NAMES_COLOR  "#0055ff";
  NOTES          "";
  BEGIN

    RULE                 "MaxStorage";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Lemon Reservoir.Outflow" [] := IF ( $ "Lemon Reservoir.Storage" [] > $ "LemonData.MaxStorage" [] )
 THEN
  "VolumeToFlow"( $ "Lemon Reservoir.Storage" [] - $ "LemonData.MaxStorage" [], @"t" ) + $ "Lemon Reservoir.Outflow" []
 ENDIF;

    END;

    RULE                 "MaxSafeChannelRelease";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Lemon Reservoir.Outflow" [] := IF ( $ "Lemon Reservoir.Outflow" [] > $ "LemonData.Safe Channel Capacity" [] )
 THEN
  $ "LemonData.Safe Channel Capacity" []
 ENDIF;

    END;

    RULE                 "KnownRelease";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Lemon Reservoir.Outflow" [] := IF ( NOT IsNaN $ "LemonData.KnownRelease" [] )
 THEN
  $ "LemonData.KnownRelease" []
 ENDIF;

    END;

    RULE                 "Release Smoothing";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Lemon Reservoir.Outflow" [] := IF ( $ "Lemon Reservoir.Outflow" [] < $ "Lemon Reservoir.Outflow" [@"t - 1"] AND $ "Lemon Reservoir.Storage" [@"t - 1"] / $ "LemonData.FloodControlStorageLimit" [@"t - 1"] >= $ "LemonData.DownwardSmoothingACE_ResetValue" [] )
 THEN
  $ "Lemon Reservoir.Outflow" [@"t - 1"]
 ENDIF;

    END;

    RULE                 "FloodControlLimits";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Lemon Reservoir.Outflow" [] := IF ( @"t" >= @"March 20" AND @"t" < @"July 11" AND $ "Lemon Reservoir.Storage" [] > $ "LemonData.FloodControlStorageLimit" [] * $ "LemonData.PercentofACE_Flood_Control_Limit" [] )
 THEN
  "VolumeToFlow"( $ "Lemon Reservoir.Storage" [] - ( $ "LemonData.FloodControlStorageLimit" [] * $ "LemonData.PercentofACE_Flood_Control_Limit" [] ), @"t" ) + $ "Lemon Reservoir.Outflow" []
 ENDIF;

    END;

    RULE                 "SetFloodControlStorageLimit";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "LemonData.FloodControlStorageLimit" [] := IF ( @"t" >= @"March 20" AND @"t" <= @"July 10" )
 THEN
  "TableInterpolation3D"( $ "LemonData.Flood Control Table", 0.00000000, "GetDayOfYear"( @"t" ), 1.00000000, "Remaining Spring Runoff Volume"( % "Lemon Reservoir" ), 2.00000000, @"t" )
 ENDIF;

    END;

    RULE                 "IrrigationPondFilling";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Lemon Reservoir.Outflow" [] := IF ( "LemonPondFillingSeason"(  ) AND $ "Lemon Reservoir.Outflow" [] < 50.00000000 "cfs" )
 THEN
  50.00000000 "cfs"
 ENDIF;

    END;

    RULE                 "SetRemainingSpringRunoff";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "LemonData.RemainingSpringRunoff" [] := "Remaining Spring Runoff Volume"( % "Lemon Reservoir" );

    END;

    RULE                 "Deadpool";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "Lemon Reservoir.Outflow" [] := IF ( $ "Lemon Reservoir.Storage" [] < $ "LemonData.MinEOYStorage" [] )
 THEN
  $ "LemonData.MinimumRelease" []
 ENDIF;

    END;

    RULE                 "Irrigation Release";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Lemon Reservoir.Outflow" [] := IF ( "Lemon Irrigation Season"(  ) AND $ "Lemon Reservoir.Outflow" [] < $ "LemonData.Downstream Demand" [] )
 THEN
  $ "LemonData.Downstream Demand" []
 ENDIF;

    END;

    RULE                 "ShowDemandPercentages";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000 AND NOT "HasRuleFiredSuccessfully"( "Current Rule" ) AND @"t" == @"October 31";
    NOTES                "";
    BEGIN

      $ "LemonData.DemandPercentages" [] := "Min"( 1.00000000, "SumFlowsToVolume"( $ "Lemon Reservoir.Outflow", @"24:00:00 May 1, Current Year", @"t" ) / "SumFlowsToVolume"( $ "LemonData.MedianDemands", @"24:00:00 May 1, Current Year", @"t" ) );

    END;

    RULE                 "SetDownstreamDemands";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000 AND NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "LemonData.Downstream Demand" [] := IF ( @"t" == @"November 1" )
 THEN
  $ "LemonData.Downstream Demand" [@"t - 1"]
 ELSE
  IF ( "Lemon Irrigation Season"(  ) )
  THEN
   "Max"( IF ( "CalculateAvailableIrrigationVolume"( % "Lemon Reservoir", $ "Lemon Reservoir.Inflow", $ "Lemon Reservoir.Storage", $ "LemonData.MinEOYStorage", $ "Lemon Reservoir.Evaporation" ) > $ "LemonData.MedianDemandsVolRemaining" [] )
   THEN
    $ "LemonData.MedianDemands" []
   ELSE
    IF ( "CalculateAvailableIrrigationVolume"( % "Lemon Reservoir", $ "Lemon Reservoir.Inflow", $ "Lemon Reservoir.Storage", $ "LemonData.MinEOYStorage", $ "Lemon Reservoir.Evaporation" ) <= $ "LemonData.MedianDemandsVolRemaining" [] )
    THEN
     "CalculateAvailableIrrigationVolume"( % "Lemon Reservoir", $ "Lemon Reservoir.Inflow", $ "Lemon Reservoir.Storage", $ "LemonData.MinEOYStorage", $ "Lemon Reservoir.Evaporation" ) / $ "LemonData.MedianDemandsVolRemaining" [] * $ "LemonData.MedianDemands" []
    ELSE
     1.00000000 "cfs"
    ENDIF
   ENDIF, 1.00000000 "cfs" )
  ELSE
   1.00000000 "cfs"
  ENDIF
 ENDIF;

    END;

    RULE                 "Minimum Release";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Lemon Reservoir.Outflow" [] := $ "LemonData.MinimumRelease" [];

    END;

  END;

  POLICY_GROUP   "1 Cycle- Vallecito Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NAMES_COLOR  "#0055ff";
  NOTES          "";
  BEGIN

    RULE                 "KnownRelease";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Vallecito Reservoir.Outflow" [] := IF ( NOT IsNaN $ "VallecitoData.KnownRelease" [] )
 THEN
  $ "VallecitoData.KnownRelease" []
 ENDIF;

    END;

    RULE                 "MaxControlledRelease";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Vallecito Reservoir.Outflow" [] := IF ( $ "Vallecito Reservoir.Outflow" [] > $ "VallecitoData.MaxOutletWorksRelease" [] )
 THEN
  $ "VallecitoData.MaxOutletWorksRelease" []
 ENDIF;

    END;

    RULE                 "MaxStorageFill";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Vallecito Reservoir.Outflow" [] := IF ( $ "Vallecito Reservoir.Storage" [] > $ "VallecitoData.MaxStorage" [] )
 THEN
  "VolumeToFlow"( $ "Vallecito Reservoir.Storage" [] - $ "VallecitoData.MaxStorage" [], @"t" ) + $ "Vallecito Reservoir.Outflow" []
 ENDIF;

    END;

    RULE                 "MaxSafeChannelRelease";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Vallecito Reservoir.Outflow" [] := IF ( $ "Vallecito Reservoir.Outflow" [] > $ "VallecitoData.Safe Channel Capacity" [] )
 THEN
  $ "VallecitoData.Safe Channel Capacity" []
 ENDIF;

    END;

    RULE                 "ReleaseSmoothing";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Vallecito Reservoir.Outflow" [] := IF ( $ "Vallecito Reservoir.Outflow" [] < $ "Vallecito Reservoir.Outflow" [@"t - 1"] AND $ "Vallecito Reservoir.Storage" [@"t - 1"] / $ "VallecitoData.FloodControlStorageLimit" [@"t - 1"] >= $ "VallecitoData.DownwardSmoothingACE_ResetValue" [] )
 THEN
  $ "Vallecito Reservoir.Outflow" [@"t - 1"]
 ENDIF;

    END;

    RULE                 "FloodControlLimits";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Vallecito Reservoir.Outflow" [] := IF ( @"t" >= @"March 1" AND @"t" < @"August 1" AND $ "Vallecito Reservoir.Storage" [] > $ "VallecitoData.FloodControlStorageLimit" [] * $ "VallecitoData.PercentofACE_Flood_Control_Limit" [] )
 THEN
  "VolumeToFlow"( $ "Vallecito Reservoir.Storage" [] - ( $ "VallecitoData.FloodControlStorageLimit" [] * $ "VallecitoData.PercentofACE_Flood_Control_Limit" [] ), @"t" ) + $ "Vallecito Reservoir.Outflow" []
 ENDIF;

    END;

    RULE                 "SetFloodControlStorageLimit";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "VallecitoData.FloodControlStorageLimit" [] := IF ( @"t" >= @"March 1" AND @"t" <= @"July 31" )
 THEN
  "TableInterpolation3D"( $ "VallecitoData.Flood Control Table", 0.00000000, "GetDayOfYear"( @"t" ), 1.00000000, "Remaining Spring Runoff Volume"( % "Vallecito Reservoir" ), 2.00000000, @"t" )
 ENDIF;

    END;

    RULE                 "IrrigationPondFilling";
    DESCRIPTION          "Using Lemon's pond filling season. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Vallecito Reservoir.Outflow" [] := IF ( "LemonPondFillingSeason"(  ) AND $ "Vallecito Reservoir.Outflow" [] < 100.00000000 "cfs" )
 THEN
  100.00000000 "cfs"
 ENDIF;

    END;

    RULE                 "SetRemainingSpringRunnoff";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "VallecitoData.RemainingSpringRunoff" [] := "Remaining Spring Runoff Volume"( % "Vallecito Reservoir" );

    END;

    RULE                 "PostPeakSmoothing";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Vallecito Reservoir.Outflow" [] := IF ( "PostPeakSmoothingPeriod"(  ) )
 THEN
  "Max"( "VolumeToFlow"( ( ( $ "Vallecito Reservoir.Storage" [] + "FlowToVolume"( $ "Vallecito Reservoir.Outflow" [], @"t" ) ) + "Remaining Post Peak Inflow Volume"(  ) - $ "VallecitoData.MaxWinterStorage" [] ) / ( "GetJulianDate"( @"24:00:00 November 1, Current Year" ) - "GetJulianDate"( @"t" ) ), @"t" ), $ "Vallecito Reservoir.Outflow" [] )
 ENDIF;

    END;

    RULE                 "Deadpool";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "Vallecito Reservoir.Outflow" [] := IF ( $ "Vallecito Reservoir.Storage" [] < $ "VallecitoData.MinEOYStorage" [] )
 THEN
  $ "VallecitoData.MinimumRelease" []
 ENDIF;

    END;

    RULE                 "Irrigation Release";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000 AND NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "Vallecito Reservoir.Outflow" [] := IF ( "Vallecito Irrigation Season"(  ) AND $ "Vallecito Reservoir.Outflow" [] < $ "VallecitoData.Downstream Demand" [] )
 THEN
  $ "VallecitoData.Downstream Demand" []
 ENDIF;

    END;

    RULE                 "ShowDemandPercentages";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000 AND NOT "HasRuleFiredSuccessfully"( "Current Rule" ) AND @"t" == @"October 31";
    NOTES                "";
    BEGIN

      $ "VallecitoData.DemandPercentages" [] := "Min"( 1.00000000, "SumFlowsToVolume"( $ "Vallecito Reservoir.Outflow", @"24:00:00 May 9, Current Year", @"t" ) / "SumFlowsToVolume"( $ "VallecitoData.MedianDemands", @"24:00:00 May 9, Current Year", @"t" ) );

    END;

    RULE                 "SetDownstreamDemands";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000 AND NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "VallecitoData.Downstream Demand" [] := IF ( @"t" == @"November 1" )
 THEN
  $ "VallecitoData.Downstream Demand" [@"t - 1"]
 ELSE
  IF ( "Vallecito Irrigation Season"(  ) )
  THEN
   "Max"( IF ( "CalculateAvailableIrrigationVolume"( % "Vallecito Reservoir", $ "Vallecito Reservoir.Inflow", $ "Vallecito Reservoir.Storage", $ "VallecitoData.MinEOYStorage", $ "Vallecito Reservoir.Evaporation" ) > $ "VallecitoData.MedianDemandsVolRemaining" [] )
   THEN
    $ "VallecitoData.MedianDemands" []
   ELSE
    IF ( "CalculateAvailableIrrigationVolume"( % "Vallecito Reservoir", $ "Vallecito Reservoir.Inflow", $ "Vallecito Reservoir.Storage", $ "VallecitoData.MinEOYStorage", $ "Vallecito Reservoir.Evaporation" ) <= $ "VallecitoData.MedianDemandsVolRemaining" [] )
    THEN
     "CalculateAvailableIrrigationVolume"( % "Vallecito Reservoir", $ "Vallecito Reservoir.Inflow", $ "Vallecito Reservoir.Storage", $ "VallecitoData.MinEOYStorage", $ "Vallecito Reservoir.Evaporation" ) / $ "VallecitoData.MedianDemandsVolRemaining" [] * $ "VallecitoData.MedianDemands" []
    ELSE
     1.00000000 "cfs"
    ENDIF
   ENDIF, 1.00000000 "cfs" )
  ELSE
   1.00000000 "cfs"
  ENDIF
 ENDIF;

    END;

    RULE                 "WinterStorageLimit";
    DESCRIPTION          "Set release such that reservoir storage is less than or equal to 77,000 af.  This is to keep reservoir elevation below the bottom of radial gates during icing season.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Vallecito Reservoir.Outflow" [] := IF ( "Winter Storage Season"(  ) AND $ "Vallecito Reservoir.Storage" [] > $ "VallecitoData.MaxWinterStorage" [] )
 THEN
  "Max"( "VolumeToFlow"( $ "Vallecito Reservoir.Storage" [] + "FlowToVolume"( $ "Vallecito Reservoir.Outflow" [], @"t" ) - $ "VallecitoData.MaxWinterStorage" [], @"t" ), $ "Vallecito Reservoir.Outflow" [] )
 ENDIF;

    END;

    RULE                 "SetWinterRelease";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Vallecito Reservoir.Outflow" [] := IF ( "Winter Storage Season"(  ) )
 THEN
  "Max"( "VolumeToFlow"( ( ( $ "Vallecito Reservoir.Storage" [@"t - 1"] + "Remaining Winter Inflow Volume"( % "Vallecito Reservoir" ) ) - $ "VallecitoData.MaxWinterStorage" [] ) / "DaysUntilEndOfWinterStorage"(  ), @"t" ), $ "Vallecito Reservoir.Outflow" [] )
 ENDIF;

    END;

    RULE                 "SetMinReleaseFor2019Winter_TEMP";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000 AND @"t" < @"24:00:00 June 1, 2019";
  NAMES_COLOR  "#ff0000";
    NOTES                "";
    BEGIN

      $ "Vallecito Reservoir.Outflow" [] := 6.00000000 "cfs";

    END;

    RULE                 "Minimum Release";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Vallecito Reservoir.Outflow" [] := $ "VallecitoData.MinimumRelease" [];

    END;

  END;

  POLICY_GROUP   "1 Cycle- Set Losses";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NAMES_COLOR  "#0055ff";
  NOTES          "";
  BEGIN

    RULE                 "Set Local Inflows";
    DESCRIPTION          "Daily gainloss is a calculated gage-to-gage statistical loss. Choose statistical for entire model run in SWITCHES object. <br>Local inflows will never make river go less than 0. This is recorded in the reach &quot;unidentified loss&quot;.<br>Yes.<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Animas River.Local Inflow" [] := $ "Animas River.DailyGainLoss" [@"t", $ "SWITCHES.ReachLossPercentile" []];

      $ "SJAF.Local Inflow" [] := $ "SJAF.DailyGainLoss" [@"t", $ "SWITCHES.ReachLossPercentile" []];

      $ "SJFS.Local Inflow" [] := $ "SJFS.DailyGainLoss" [@"t", $ "SWITCHES.ReachLossPercentile" []];

      $ "SJS4.Local Inflow" [] := $ "SJS4.DailyGainLoss" [@"t", $ "SWITCHES.ReachLossPercentile" []];

      $ "SJ4B.Local Inflow" [] := $ "SJ4B.DailyGainLoss" [@"t", $ "SWITCHES.ReachLossPercentile" []];

      $ "Pine River.Local Inflow" [] := $ "Pine River.DailyGainLoss" [@"t", $ "SWITCHES.ReachLossPercentile" []];

      $ "Florida River.Local Inflow" [] := $ "Florida River.DailyGainLoss" [@"t", $ "SWITCHES.ReachLossPercentile" []];

    END;

    RULE                 "SetShortageLocalInflow";
    DESCRIPTION          "This will bound the Animas Losses between a max of 775 cfs and a min of -500 cfs. Based on LOSSES_V.xlsm.<br>This is just a max and min observed for the whole year 1999-2013.  Next step would be put into a table by month of year.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Shortage.Local Inflow" [] := 0.00000000 "cfs";

    END;

    RULE                 "Set Shortage Inflow";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "Shortage.Inflow" [] := 0.00000000 "cfs";

    END;

    RULE                 "Set SJC Diversions";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "San Juan Chama Project.Diversion" [] := $ "San Juan Chama Project.Diversion Requested" [];

    END;

    RULE                 "Set NIIP Diversions";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "NIIP.Diversion" [] := $ "NIIP.Diversion Requested" [];

    END;

    RULE                 "Set NIIP If Known";
    DESCRIPTION          "If NIIP operations are known (i.e. they are shutting off for some period of time, or for the season), overwrite NaN for the period of known operations in that slot. This rule will overwrite any NIIP calculations and therefore the total annual volume will not equate to the NAPI Estimates.<br>";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "NIIP.Diversion Requested" [] := IF ( NOT IsNaN $ "NIIP.KNOWNDiversion" [] )
 THEN
  $ "NIIP.KNOWNDiversion" []
 ELSE
  "VolumeToFlow"( $ "NIIP.DailyForecastVol Adjusted" [], @"t" )
 ENDIF;

    END;

    RULE                 "Calc NIIP Diversions";
    DESCRIPTION          "This rule takes the daily forecasted NIIP diversion (in af) and further scales it by multiplying it by (forecast remaining/observed remaining), so that the total CY volume adds up to NAPI's annual estimates.";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "NIIP.DailyForecastVol Adjusted" [] := IF ( "GetYear"( @"t" ) == "GetYear"( @"Start Timestep" ) )
 THEN
  "VolumeToFlow"( $ "NIIP.DailyForecastVol" [] * ( ( $ "NIIP.NAPI Estimates" [@"24:00:00 December 31, Current Year"] - "SumSlot"( $ "NIIP.DailyForecastVol", @"24:00:00 January 1, Current Year", @"Start Timestep - 1" ) ) / ( $ "NIIP.NAPI Estimates" [@"24:00:00 December 31, Current Year"] - $ "NIIP.CY Observed To Date" [@"Start Timestep - 1"] ) ), @"t" )
 ELSE
  $ "NIIP.DailyForecastVol" []
 ENDIF;

    END;

    RULE                 "Calc NIIP Daily Forecast";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "NIIP.DailyForecastVol" [] := $ "NIIP.disagg percentage" [] * $ "NIIP.NAPI Estimates" [@"24:00:00 December 31, Current Year"];

    END;

    RULE                 "MANUAL NIIP";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "";
    BEGIN

      $ "NIIP.Diversion Requested" [] := $ "NIIP.StaticYearlyNIIPvalues" [];

    END;

  END;

  POLICY_GROUP   "1 Cycle - OFFICIAL INFLOW FORECASTS";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NAMES_COLOR  "#ffaa00";
  NOTES          "";
  BEGIN

    RULE                 "Set SJC Diversion";
    DESCRIPTION          "Daily SJC diversion is directly related to the daily MUI flows. This correlation was made by comparing historic Azotea flows and MUI flows from 10/1/1980 - 8/31/2018.  We are assuming on a daily basis that Azotea will pull whatever is available. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep" AND "GetRunCycleIndex"(  ) == 1.00000000 AND $ "SWITCHES.MODE" [] == 0.00000000;
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"Start Timestep" TO @"Finish Timestep") DO
            $ "San Juan Chama Project.Diversion Requested" [date] := "Max"( ( $ "NavajoData.CBRFC Inflow" [date] - 570.07000000 "cfs" ) / 6.58970000 "cfs" * 1.00000000 "cfs", 0.00000000 "cfs" );

      ENDFOREACH;

    END;

    RULE                 "Set Month 1 Inflows";
    DESCRIPTION          "Do not use execution constraints. Inflows must be input every cycle (why?) or model will not execute completely.<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "GetRunCycleIndex"(  ) == 1.00000000 ) AND $ "SWITCHES.MODE" [] == 0.00000000;
    NOTES                "";
    BEGIN

      $ "Vallecito Reservoir.Inflow" [] := IF ( NOT IsNaN $ "INFLOW SO FAR THIS MONTH.Vallecito" [] )
 THEN
  $ "INFLOW SO FAR THIS MONTH.Vallecito" []
 ENDIF;

      $ "Lemon Reservoir.Inflow" [] := IF ( NOT IsNaN $ "INFLOW SO FAR THIS MONTH.Lemon" [] )
 THEN
  $ "INFLOW SO FAR THIS MONTH.Lemon" []
 ENDIF;

      $ "NavajoData.CBRFC Inflow" [] := IF ( NOT IsNaN $ "INFLOW SO FAR THIS MONTH.Navajo" [] )
 THEN
  $ "INFLOW SO FAR THIS MONTH.Navajo" []
 ENDIF;

      $ "Animas abv Nighthorse.Inflow" [] := IF ( NOT IsNaN $ "INFLOW SO FAR THIS MONTH.AnimasDur" [] )
 THEN
  $ "INFLOW SO FAR THIS MONTH.AnimasDur" []
 ENDIF;

    END;

    RULE                 "Set Inflows";
    DESCRIPTION          "Do not use execution constraints. Inflows must be input every cycle (why?) or model will not execute completely.<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep" AND ( NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "GetRunCycleIndex"(  ) == 1.00000000 ) AND $ "SWITCHES.MODE" [] == 0.00000000;
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"Start Timestep" TO @"Finish Timestep") DO
            $ "Vallecito Reservoir.Inflow" [date] := $ "InflowDisagg.InflowForecastVallecito" [date];

            $ "NavajoData.CBRFC Inflow" [date] := $ "InflowDisagg.InflowForecastNavajo" [date];

            $ "Lemon Reservoir.Inflow" [date] := $ "InflowDisagg.InflowForecastLemon" [date];

            $ "Animas abv Nighthorse.Inflow" [date] := $ "InflowDisagg.InflowForecastAnimas" [date];

      ENDFOREACH;

    END;

    RULE                 "1 Cycle - Write Scaled Forecast";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000 AND @"t" == @"Start Timestep" AND $ "SWITCHES.MODE" [] == 0.00000000;
    NOTES                "";
    BEGIN

      FOREACH (STRING forecastLocation IN { "Vallecito" , "Lemon" , "Animas" , "Navajo" }) DO
          DESCRIPTION          "Loop over all daily timesteps in the run. <br>";
      FOREACH (DATETIME date IN @"Start Timestep" TO @"Finish Timestep") DO
          DESCRIPTION          "Get the date at the end of that month. <br>";
      WITH_STATEMENT (DATETIME endOfMonth = "CompletePartialDate"( @"Max DayOfMonth", date )) DO
          DESCRIPTION          "Find the ratio of the CBRFC forecast volume to the computed forecast over this month. <br>";
      WITH_STATEMENT (NUMERIC ratio = % "CBRFC" & ( "MapForecastLocationToCode"( forecastLocation ) CONCAT "CBRFC Forecast Type"(  ) ) [endOfMonth] / "SumFlowsToVolume"( % "InflowDisagg" & ( "InflowForecastUnscaled" CONCAT forecastLocation ), "CompletePartialDate"( @"Min DayOfMonth", date ), endOfMonth )) DO
          DESCRIPTION          "Set the forecast by multiplying the unscaled forecast by the scaling factor. <br>";
      % "InflowDisagg" & ( "InflowForecast" CONCAT forecastLocation ) [date] := % "InflowDisagg" & ( "InflowForecastUnscaled" CONCAT forecastLocation ) [date] * ratio;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      ENDFOREACH;

      ENDFOREACH;

    END;

    RULE                 "1 Cycle - Write Forecast as Average of Nearest Years";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000 AND @"t" == @"Start Timestep" AND $ "SWITCHES.MODE" [] == 0.00000000;
    NOTES                "";
    BEGIN

      FOREACH (STRING forecastLocation IN { "Vallecito" , "Lemon" , "Animas" , "Navajo" }) DO
          DESCRIPTION          "Loop over all daily timesteps <br>";
      FOREACH (DATETIME date IN @"Start Timestep" TO @"Finish Timestep") DO
          DESCRIPTION          "Get the list of nearest years <br>";
      WITH_STATEMENT (LIST NearestYears = FOR ( NUMERIC num IN "GetNumbers"( 1.00000000, $ "InflowDisagg.NumberOfSimilarYears" [], 1.00000000 ) ) WITH LIST result = {  } DO
  APPEND % "InflowDisagg" & ( "HistoricalYearsSelected" CONCAT forecastLocation ) ["CompletePartialDate"( @"24:00:00 Max DayOfMonth", date ), num - 1.00000000] ONTO result
 ENDFOR) DO
          DESCRIPTION          "Average the flows for this day (i.e. Aug 13) using N values from the historical years; e.g. Aug 13, <br>1983, Aug 13 1989, Aug 13, 2015. <br>";
      % "InflowDisagg" & ( "InflowForecastUnscaled" CONCAT forecastLocation ) [date] := FOR ( NUMERIC year IN NearestYears ) STAT_AVE
  % "HISTORIC" & ( forecastLocation CONCAT "DailyInflow" ) ["CompletePartialDate"( "NumberToYear"( year ), IF ( ( date == @"February 29" ) COMMENTED_BY "Need special logic on leap day <br>" )
  THEN
   date - 1.00000000 "day"
  ELSE
   date
  ENDIF )]
 ENDFOR;

      END_WITH_STATEMENT;

      ENDFOREACH;

      ENDFOREACH;

    END;

    RULE                 "1 Cycle - Find Nearest Years";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 1.00000000 AND @"t" == @"Start Timestep" AND $ "SWITCHES.MODE" [] == 0.00000000;
    NOTES                "";
    BEGIN

      FOREACH (STRING forecastLocation IN { "Vallecito" , "Lemon" , "Animas" , "Navajo" }) DO
            FOREACH (DATETIME givenMonth IN "GetDates"( "OffsetDate"( @"Start Timestep - 1", 1.00000000, "1 Months" ), @"Finish Timestep", "1 Months" ) COMMENTED_BY "Get a List of all the months in the run <br>&lcub;Aug 31, 2014, Sep 30, 2014,...&rcub; <br>") DO
            WITH_STATEMENT (LIST MonthsAndYearsForThisMonth = FOR ( DATETIME month IN "GetDates"( @"24:00:00 October 31, 1980", @"24:00:00 September 30, 2017", "1 Months" ) ) WITH LIST result = {  } DO
  IF ( "GetMonth"( month ) == "GetMonth"( givenMonth ) )
  THEN
   APPEND { month , "GetYear"( month ) } ONTO result
  ELSE
   result
  ENDIF
 ENDFOR COMMENTED_BY "Get a list of all of the months that match the given Month<br>&lcub;Aug 31, 2015, 2015&rcub;  <br>") DO
          DESCRIPTION          "Get a sorted list of the forecast location volume and corresponding year<br>&lcub;&lcub;1000AF, 2013&rcub; , &lcub;1200AF, 1985&rcub;, ...&rcub; <br>";
      WITH_STATEMENT (LIST SortedListOfYearsVolumes = "Sort"( FOR ( LIST monthYear IN MonthsAndYearsForThisMonth ) WITH LIST result = {  } DO
  APPEND { % "HISTORIC" & ( forecastLocation CONCAT "MonthlyInflow" ) [GET @INDEX 0.00000000 FROM monthYear] , GET @INDEX 1.00000000 FROM monthYear } ONTO result
 ENDFOR )) DO
          DESCRIPTION          "Find the N nearest years based on the above list and the forecast volume. <br>";
      WITH_STATEMENT (LIST nearestYears = "GetNNearestYears"( SortedListOfYearsVolumes, givenMonth, forecastLocation, "CBRFC Forecast Type"(  ) )) DO
            FOREACH (NUMERIC num IN "GetNumbers"( 1.00000000, $ "InflowDisagg.NumberOfSimilarYears" [], 1.00000000 )) DO
          DESCRIPTION          "Loop over the number of nearest years and set the nearest years (as numbers) to an Agg slot  <br>";
      % "InflowDisagg" & ( "HistoricalYearsSelected" CONCAT forecastLocation ) [givenMonth, num - 1.00000000] := GET @INDEX num - 1.00000000 FROM nearestYears;

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      ENDFOREACH;

      ENDFOREACH;

    END;

  END;

  POLICY_GROUP   "1 Cycle - MRM INFLOW FORECASTS";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NAMES_COLOR  "#ffaa00";
  NOTES          "";
  BEGIN

    RULE                 "Set SJC Diversion";
    DESCRIPTION          "Daily SJC diversion is directly related to the daily MUI flows. This correlation was made by comparing historic Azotea flows and MUI flows from 10/1/1980 - 8/31/2018.  We are assuming on a daily basis that Azotea will pull whatever is available. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep" AND "GetRunCycleIndex"(  ) == 1.00000000 AND $ "SWITCHES.MODE" [] == 1.00000000;
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"Start Timestep" TO @"Finish Timestep") DO
            $ "San Juan Chama Project.Diversion Requested" [date] := "Max"( ( $ "NavajoData.CBRFC Inflow" [date] - 570.07000000 "cfs" ) / 6.58970000 "cfs" * 1.00000000 "cfs", 0.00000000 "cfs" );

      ENDFOREACH;

    END;

    RULE                 "Set Inflows";
    DESCRIPTION          "Do not use execution constraints. Inflows must be input every cycle (why?) or model will not execute completely.<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep" AND $ "SWITCHES.MODE" [] == 1.00000000;
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"Start Timestep" TO @"Finish Timestep") DO
            $ "Vallecito Reservoir.Inflow" [date] := $ "MRM Data.TraceVCRC2" [date];

            $ "NavajoData.CBRFC Inflow" [date] := $ "MRM Data.TraceNVRN5" [date];

            $ "Lemon Reservoir.Inflow" [date] := $ "MRM Data.TraceLEMC2" [date];

            $ "Animas abv Nighthorse.Inflow" [date] := $ "MRM Data.TraceDRGC2" [date];

      ENDFOREACH;

    END;

  END;

  UTILITY_GROUP "Vallecito Functions";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  NOTES          "";
  BEGIN

    FUNCTION       "Winter Storage Season" (  )
    RETURN_TYPE    BOOLEAN;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      @"t" > @"October 31" OR @"t" < @"March 1";

    END;

    FUNCTION       "Vallecito Irrigation Season" (  )
    RETURN_TYPE    BOOLEAN;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      @"t" <= @"October 31" AND @"t" > @"May 9";

    END;

    FUNCTION       "DaysUntilEndOfWinterStorage" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "This function calculates the number of days from the current timestep to March 1st (end of winter storage season) of the current Water Year.";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      IF ( "Winter Storage Season"(  ) AND @"t" > @"October 31" )
 THEN
  "GetJulianDate"( @"24:00:00 March 1, Next Year" ) - "GetJulianDate"( @"t" )
 ELSE
  IF ( "Winter Storage Season"(  ) AND @"t" < @"March 1" )
  THEN
   "GetJulianDate"( @"24:00:00 March 1, Current Year" ) - "GetJulianDate"( @"t" )
  ELSE
   0.00000000 "day"
  ENDIF
 ENDIF;

    END;

    FUNCTION       "Remaining Winter Inflow Volume" ( OBJECT res )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      IF ( "Winter Storage Season"(  ) AND @"t" > @"October 31" )
 THEN
  "SumFlowsToVolume"( res & "Inflow", @"t", @"24:00:00 February Max DayOfMonth, Next Year" )
 ELSE
  IF ( "Winter Storage Season"(  ) AND @"t" < @"March 1" )
  THEN
   "SumFlowsToVolume"( res & "Inflow", @"t", @"24:00:00 February Max DayOfMonth, Current Year" )
  ELSE
   0.00000000 "acre-feet"
  ENDIF
 ENDIF;

    END;

    FUNCTION       "Remaining Post Peak Inflow Volume" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      IF ( "PostPeakSmoothingPeriod"(  ) )
 THEN
  "SumFlowsToVolume"( $ "Vallecito Reservoir.Inflow", @"t", @"24:00:00 October Max DayOfMonth, Current Year" )
 ELSE
  0.00000000 "acre-feet"
 ENDIF;

    END;

    FUNCTION       "PostPeakSmoothingPeriod" (  )
    RETURN_TYPE    BOOLEAN;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      @"t" >= "NumberToDate"( $ "VallecitoData.PostPeakSmoothingBeginDate" [] ) AND @"t" < @"November 1";

    END;

  END;

  UTILITY_GROUP "Lemon Functions";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  NOTES          "";
  BEGIN

    FUNCTION       "Lemon Irrigation Season" (  )
    RETURN_TYPE    BOOLEAN;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      @"t" <= @"October 31" AND @"t" > @"April 30";

    END;

    FUNCTION       "LemonPondFillingSeason" (  )
    RETURN_TYPE    BOOLEAN;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      @"t" <= @"November 20" AND @"t" > @"November 15";

    END;

  END;

  UTILITY_GROUP "Nighthorse Functions";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  NOTES          "";
  BEGIN

    FUNCTION       "PickStepPump" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "This function returns the closest step pump to the value that was calculated in PumpingPerDay";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      "TableLookup"( $ "NighthorseData.StepPumps", 0.00000000, 0.00000000, "CalculateDailyFlow"(  ), @"t", TRUE );

    END;

    FUNCTION       "ALP Pumping Season" (  )
    RETURN_TYPE    BOOLEAN;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      @"t" <= @"June 30" AND @"t" > @"April 30";

    END;

    FUNCTION       "CalculateDailyFlow" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      "VolumeToFlow"( "CalculateDailyVolumeToBePumped"(  ), @"t" );

    END;

    FUNCTION       "CalculateDailyVolumeToBePumped" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "800 acrefeet denotes avg evap in May-June.";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      ( $ "NighthorseData.MaxStorage" [] + 800.00000000 "acre-feet" - $ "Nighthorse Reservoir.Storage" [@"t"] ) / ( $ "NighthorseData.RequestedPumpingPlan" [@"t"] - $ "NighthorseData.RequestedPumpingPlan" [@"t"] / 30.00000000 * $ "NighthorseData.PumpDaysOffPerMonth" [] );

    END;

    FUNCTION       "IsFirstDayOfPumping" (  )
    RETURN_TYPE    BOOLEAN;
    SCALE_UNITS    "";
    DESCRIPTION    "UPDATE THIS to directly pull from input data!";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      $ "NighthorseData.RequestedPumpingPlan" [@"t - 1"] == 0.00000000 AND $ "NighthorseData.RequestedPumpingPlan" [@"t"] > 0.00000000;

    END;

  END;

  UTILITY_GROUP "Navajo Functions";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  NOTES          "";
  BEGIN

    FUNCTION       "SpringPeakReleaseSeason" (  )
    RETURN_TYPE    BOOLEAN;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      @"t" <= @"July 20" AND @"t" >= @"March 1";

    END;

    FUNCTION       "SummerBaseflowSeason" (  )
    RETURN_TYPE    BOOLEAN;
    SCALE_UNITS    "";
    DESCRIPTION    "Should be Sptember 30th but trying to avoid spikes.";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      @"t" <= @"September 30" AND @"t" >= @"June 1";

    END;

    FUNCTION       "OLD SPROperationalSpillVolume" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "374,777 af refers to the volume of the maximum hydrograph minus the base release of 350 cfs over the duration of the maximum SPR.";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      $ "NavajoData.Cycle3AvailableWater" [] - 374777.00000000 "acre-ft";

    END;

    FUNCTION       "SPROperationalSpillVolume" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "625702 af refers to the volume of the maximum hydrograph (60-days plus ramps) minus the base release of 350 cfs over the duration of the maximum SPR.";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      "Max"( $ "NavajoData.Cycle3AvailableWater" [] - 625702.00000000 "acre-feet", 0.00000000 "acre-ft" );

    END;

    FUNCTION       "VolumeBeyondNose" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "See if there's any extra spill that couldn't be taken care of with SPR Nose.  This is done by taking the maximum release through march 1 (5,000 cfs) and multiplying it by 57 days (first day of SPR is April 27.<br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      "OLD SPROperationalSpillVolume"(  ) - 565269.00000000 "acre-ft";

    END;

    FUNCTION       "SpikeSeason" (  )
    RETURN_TYPE    BOOLEAN;
    SCALE_UNITS    "";
    DESCRIPTION    "Use later date (Sept 25-Oct 5) if min, or expecting small spike.<br>Use earlier date (Sept 10-15 start) if max, or expecting large spike.";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
  NAMES_COLOR  "#000000";
    NOTES          "";
    BEGIN

      @"t" <= @"September 30" AND @"t" >= @"September 15";

    END;

    FUNCTION       "FirstAWCalcDate" (  )
    RETURN_TYPE    DATETIME;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      "DateMax"( @"24:00:00 March 1, Current Year", @"Start Timestep" );

    END;

    FUNCTION       "USACEWinterLimitSeason" (  )
    RETURN_TYPE    BOOLEAN;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      @"t" >= @"January 1" AND @"t" <= @"July 15";

    END;

    FUNCTION       "MinReleaseFunction" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      IF ( $ "Navajo Reservoir.Pool Elevation" [@"t - 1"] <= 6018.80000000 "ft" )
 THEN
  249.00000000 "cfs"
 ELSE
  IF ( $ "Navajo Reservoir.Pool Elevation" [@"t - 1"] > 6060.00000000 "ft" )
  THEN
   499.00000000 "cfs"
  ELSE
   349.00000000 "cfs"
  ENDIF
 ENDIF;

    END;

    FUNCTION       "MaxReleaseFunction_SafetyFactor" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      "GetMaxReleaseGivenInflow"( % "Navajo Reservoir", $ "Navajo Reservoir.Inflow" [], @"t" ) * 0.99900000;

    END;

    FUNCTION       "OutflowRequredToMeetTPE1" ( OBJECT Res, SLOT ResInflow, SLOT ResStorage, SLOT ResEOYMinStorage )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      IF ( @"t" == @"Finish Timestep" )
 THEN
  ResInflow [@"t - 1"]
 ELSE
  "TargetHWGivenInflow"( Res, @"t", "DateMin"( "NextDate"( @"t", @"September 30" ), @"Finish Timestep" ), "StorageToElevation"( Res, ResEOYMinStorage [] ), "SumFlowsToVolume"( ResInflow, @"t", "DateMin"( "NextDate"( @"t", @"September 30" ), @"Finish Timestep" ) ), ResStorage [@"t - 1"] )
 ENDIF;

    END;

    FUNCTION       "NavajoFloodControlUpperColumnValue" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-ft";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      $ "NavajoData.FloodControlTables" [@"t", "Ceiling"( "SumFlowsToVolume"( $ "Navajo Reservoir.Inflow", @"t", @"24:00:00 July 15, Current Year" ), 100000.00000000 "acre-ft" )];

    END;

    FUNCTION       "NavajoFloodControlLowerColumnValue" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-ft";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      $ "NavajoData.FloodControlTables" [@"t", "Floor"( "SumFlowsToVolume"( $ "Navajo Reservoir.Inflow", @"t", @"24:00:00 July 15, Current Year" ), 100000.00000000 "acre-ft" )];

    END;

  END;

  UTILITY_GROUP "Global Functions";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  NOTES          "";
  BEGIN

    FUNCTION       "Remaining Spring Runoff Volume" ( OBJECT res )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      IF ( @"t" >= @"March 1" AND @"t" <= @"July 31" )
 THEN
  "SumFlowsToVolume"( res & "Inflow", @"t", @"24:00:00 July 31, Current Year" )
 ELSE
  0.00000000 "acre-feet"
 ENDIF;

    END;

    FUNCTION       "CalculateAvailableIrrigationVolume" ( OBJECT Res, SLOT ResInflow, SLOT ResStorage, SLOT ResEOYMinStorage, SLOT ResEvap )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      ( "FlowToVolume"( "OutflowRequredToMeetTPE"( Res, ResInflow, ResStorage, ResEOYMinStorage ), @"t" ) - ResEvap [@"t - 1"] ) * LENGTH @"t" TO "DateMin"( "NextDate"( @"t", @"November 1" ), @"Finish Timestep" );

    END;

    FUNCTION       "OutflowRequredToMeetTPE" ( OBJECT Res, SLOT ResInflow, SLOT ResStorage, SLOT ResEOYMinStorage )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      IF ( @"t" == @"Finish Timestep" )
 THEN
  ResInflow [@"t - 1"]
 ELSE
  "TargetHWGivenInflow"( Res, @"t", "DateMin"( "NextDate"( @"t", @"November 1" ), @"Finish Timestep" ), "StorageToElevation"( Res, ResEOYMinStorage [] ), "SumFlowsToVolume"( ResInflow, @"t", "DateMin"( "NextDate"( @"t", @"November 1" ), @"Finish Timestep" ) ), ResStorage [@"t - 1"] )
 ENDIF;

    END;

    FUNCTION       "Adjust GainLoss" ( OBJECT Reach )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      FOR ( NUMERIC i IN { 0.00000000 , 1.00000000 , 2.00000000 , 3.00000000 , 4.00000000 , 5.00000000 , 6.00000000 , 7.00000000 , 8.00000000 } ) WITH NUMERIC exceedance = 0.10000000 DO
  IF ( IsNaN Reach & "Inflow" [@"t"] )
  THEN
   0.50000000
  ELSE
   IF ( Reach & "Inflow" [@"t"] > $ "GainLossCalculations.Table" [STRINGIFY Reach, i] )
   THEN
    "Min"( 0.90000000, exceedance + 0.10000000 )
   ELSE
    exceedance
   ENDIF
  ENDIF
 ENDFOR;

    END;

  END;

  UTILITY_GROUP "Nearest Years";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  NAMES_COLOR  "#ffaa00";
  NOTES          "";
  BEGIN

    FUNCTION       "GetNNearestYears" ( LIST sortedListOfYearsValues, DATETIME month, STRING forecastLocation, STRING forecastType )
    RETURN_TYPE    LIST;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      WITH SLOT CBRFCSlotName = % "CBRFC" & ( "MapForecastLocationToCode"( forecastLocation ) CONCAT forecastType ) DO
  WITH LIST NumSimilarYears = "GetNumbers"( 0.00000000, $ "InflowDisagg.NumberOfSimilarYears" [] - 1.00000000, 1.00000000 ) DO
   IF ( CBRFCSlotName [month] < GET @INDEX 0.00000000 FROM GET @INDEX 0.00000000 FROM sortedListOfYearsValues )
   THEN
    FOR ( NUMERIC index IN NumSimilarYears ) WITH LIST result = {  } DO
     APPEND GET @INDEX 1.00000000 FROM GET @INDEX index FROM sortedListOfYearsValues ONTO result
    ENDFOR COMMENTED_BY "The CBRFC volume is lower than any years in history. Use the lowest N years. <br>"
   ELSE
    FOR ( NUMERIC num IN "GetNumbers"( 0.00000000, ( LENGTH sortedListOfYearsValues ) - 1.00000000, 1.00000000 ) ) WITH LIST result = {  } DO
     IF ( ( GET @INDEX 0.00000000 FROM GET @INDEX num FROM sortedListOfYearsValues ) < CBRFCSlotName [month] AND CBRFCSlotName [month] < GET @INDEX 0.00000000 FROM GET @INDEX "Min"( num + 1.00000000, ( LENGTH sortedListOfYearsValues ) - 1.00000000 ) FROM sortedListOfYearsValues )
     THEN
      FOR ( NUMERIC index IN NumSimilarYears ) WITH LIST finalResult = {  } DO
       APPEND GET @INDEX 1.00000000 FROM GET @INDEX "Min"( num + index, ( LENGTH sortedListOfYearsValues ) - 1.00000000 ) FROM sortedListOfYearsValues ONTO finalResult
      ENDFOR
     ELSE
      result
     ENDIF
    ENDFOR COMMENTED_BY "The CBRFC volume is in the historical record. Find the year that is lower than the CBRFC volume. <br>Get the two years on either side of this year. <br>"
   ENDIF
   ELSEIF_COND ( CBRFCSlotName [month] > GET @INDEX 0.00000000 FROM GET @INDEX ( LENGTH sortedListOfYearsValues ) - 1.00000000 FROM sortedListOfYearsValues )
   ELSEIF_CLAUSE ( FOR ( NUMERIC index IN NumSimilarYears ) WITH LIST result = {  } DO
    APPEND GET @INDEX 1.00000000 FROM GET @INDEX ( ( LENGTH sortedListOfYearsValues ) - 1.00000000 ) - index FROM sortedListOfYearsValues ONTO result
   ENDFOR COMMENTED_BY "The CBRFC volume is higher than any year in history. Use the highest N years. <br>" )
   END_ELSEIF
  ENDWITH
 ENDWITH;

    END;

    FUNCTION       "MapForecastLocationToCode" ( STRING forecastLocation )
    RETURN_TYPE    STRING;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      IF ( forecastLocation == "Vallecito" )
 THEN
  "VCRC2"
 ELSE
  "NVRN5"
 ENDIF
 ELSEIF_COND ( forecastLocation == "Lemon" )
 ELSEIF_CLAUSE ( "LEMC2" )
 END_ELSEIF
 ELSEIF_COND ( forecastLocation == "Animas" )
 ELSEIF_CLAUSE ( "DRGC2" )
 END_ELSEIF;

    END;

    FUNCTION       "CBRFC Forecast Type" (  )
    RETURN_TYPE    STRING;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      WITH NUMERIC type = $ "SWITCHES.CBRFC Forecast Type" [] DO
  IF ( type == 2.00000000 )
  THEN
   "most"
  ELSE
   "max" COMMENTED_BY "type == 3 <br>"
  ENDIF
  ELSEIF_COND ( type == 1.00000000 )
  ELSEIF_CLAUSE ( "min" )
  END_ELSEIF
 ENDWITH;

    END;

  END;

END
